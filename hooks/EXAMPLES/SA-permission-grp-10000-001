#!/bin/bash
#	hooks/EXAMPLES/SA-permission-grp-10000-001  2.52.382  2019-09-06T11:20:19.272175-05:00 (CDT)  https://github.com/BradleyA/git-TEST-commit-automation.git  uadmin  five-rpi3b.cptx86.com 2.51  
#	   #7 hooks/EXAMPLES/SA-permission-grp-10000-001  changed messages from owner to group 
#	hooks/EXAMPLES/SA-permission-grp-10000-001  2.51.381  2019-09-06T11:16:31.457401-05:00 (CDT)  https://github.com/BradleyA/git-TEST-commit-automation.git  uadmin  five-rpi3b.cptx86.com 2.50-1-g4a701ea  
#	   #7 hooks/EXAMPLES/SA-permission-grp-10000-001 test the test cases for the test case 
#	hooks/EXAMPLES/SA-permission-grp-10000-001  2.50.379  2019-09-06T11:06:38.321785-05:00 (CDT)  https://github.com/BradleyA/git-TEST-commit-automation.git  uadmin  five-rpi3b.cptx86.com 2.49-1-g212d5dd 
#	   close #7 hooks/EXAMPLES/SA-permission-grp-10000-001  done 
#86# SA-permission-grp-10000-001 - test case
###  Production standard 3.0 shellcheck
###  Production standard 5.1.160 Copyright
#    Copyright (c) 2019 Bradley Allen
#    MIT License is in the online DOCUMENTATION, DOCUMENTATION URL defined below.
###  Production standard 1.3.496 DEBUG variable
#    Order of precedence: environment variable, default code
if [[ "${DEBUG}" == ""  ]] ; then DEBUG="0" ; fi   # 0 = debug off, 1 = debug on, 'export DEBUG=1', 'unset DEBUG' to unset environment variable (bash)
if [[ "${DEBUG}" == "2" ]] ; then set -x    ; fi   # Print trace of simple commands before they are executed
if [[ "${DEBUG}" == "3" ]] ; then set -v    ; fi   # Print shell input lines as they are read
if [[ "${DEBUG}" == "4" ]] ; then set -e    ; fi   # Exit command has a non-zero exit status
#
BOLD=$(tput -Txterm bold)
NORMAL=$(tput -Txterm sgr0)

#    Date and time function ISO 8601
get_date_stamp() {
  DATE_STAMP=$(date +%Y-%m-%dT%H:%M:%S.%6N%:z)
  TEMP=$(date +%Z)
  DATE_STAMP="${DATE_STAMP} (${TEMP})"
}

#    Fully qualified domain name FQDN hostname
LOCALHOST=$(hostname -f)

#    Version
SCRIPT_VERSION=$(head -2 "${0}" | awk '{printf $3}')

if [[ "${DEBUG}" == "1" ]] ; then get_date_stamp ; echo -e "${NORMAL}${DATE_STAMP} ${LOCALHOST} ${0}[$$] ${SCRIPT_VERSION} ${LINENO} ${USER} ${USER_ID}:${GROUP_ID} ${BOLD}[DEBUG]${NORMAL}  Operation started." 1>&2 ; fi

###  Place test case here

GROUP_ID_NUM=10000

FILE_GROUP_ID_NUM=$(stat -Lc %g "${1}")
#	GROUP_ID_NAME=$(getent group "${GROUP_ID_NUM}" | cut -d : -f 1)
#	FILE_GROUP_ID_NAME=$(stat -Lc %G "${1}")

#    Verify file group
if [[ "${FILE_GROUP_ID_NUM}" == "${GROUP_ID_NUM}" ]] ; then
  echo "${BOLD}Test case --->${NORMAL} ${0} ${1} 0 - file permission: check group: ${FILE_GROUP_ID_NUM} - ${BOLD}PASS - PASS${NORMAL}"
  exit 0
else
  echo "${BOLD}Test case --->${NORMAL} ${0} ${1} 1 - file permission: check group: ${FILE_GROUP_ID_NUM} - ${BOLD}FAIL - FAIL${NORMAL}"
  exit 1
fi

echo "${BOLD}Test case --->${NORMAL} ${0} ${1} 124 - Test script logic ERROR - ${BOLD}ERROR - ERROR${NORMAL}"
exit 124
###
