#!/bin/bash
#	hooks/EXAMPLES/FVT-option-usage-003  2.369.1256  2020-01-25T19:47:38.166202-06:00 (CST)  https://github.com/BradleyA/git-TEST-commit-automation.git  master  uadmin  five-rpi3b.cptx86.com 2.368  
#	   Use short test case name 
#	hooks/EXAMPLES/FVT-option-usage-003  2.276.1076  2020-01-21T19:14:02.567988-06:00 (CST)  https://github.com/BradleyA/git-TEST-commit-automation.git  dev  uadmin  five-rpi3b.cptx86.com 2.275  
#	   FVT-*    Production standard 5.3.559 Copyright 
#	hooks/EXAMPLES/FVT-option-usage-003  2.256.1045  2020-01-19T09:40:05.545441-06:00 (CST)  https://github.com/BradleyA/git-TEST-commit-automation.git  dev  uadmin  five-rpi3b.cptx86.com 2.255  
#	   hooks/EXAMPLES/FVT-option-usage-00{1,2,3,4}   Production standard 5.3.555 Copyright, Production standard 1.3.550 DEBUG variable, ###  Production standard 2.3.529 log format 
#	hooks/EXAMPLES/FVT-option-usage-003  2.255.1044  2020-01-19T09:12:05.663837-06:00 (CST)  https://github.com/BradleyA/git-TEST-commit-automation.git  dev  uadmin  five-rpi3b.cptx86.com 2.254  
#	   hooks/EXAMPLES/FVT-option-usage-00{1,2,3}   Production standard 5.3.555 Copyright, Production standard 1.3.550 DEBUG variable, ###  Production standard 2.3.529 log format 
#	hooks/EXAMPLES/FVT-option-usage-003  2.138.787  2019-09-27T12:33:19.581460-05:00 (CDT)  https://github.com/BradleyA/git-TEST-commit-automation.git  uadmin  five-rpi3b.cptx86.com 2.137  
#	   close #34    EXAMPLES/SA-* FVT-*   added NO -x ${1} exit ERROR 126 
#86# hooks/EXAMPLES/FVT-option-usage-003  -  test case
###  Production standard 3.0 shellcheck
###  Production standard 5.3.559 Copyright                                    # 3.559
#    Copyright (c) 2020 Bradley Allen                                                # 3.555
#    MIT License is online in the repository as a file named LICENSE"         # 3.559
###  Production standard 1.3.550 DEBUG variable                                             # 3.550
#    Order of precedence: environment variable, default code
if [[ "${DEBUG}" == ""  ]] ; then DEBUG="0" ; fi   # 0 = debug off, 1 = debug on, 'export DEBUG=1', 'unset DEBUG' to unset environment variable (bash)
if [[ "${DEBUG}" == "2" ]] ; then set -x    ; fi   # Print trace of simple commands before they are executed
if [[ "${DEBUG}" == "3" ]] ; then set -v    ; fi   # Print shell input lines as they are read
if [[ "${DEBUG}" == "4" ]] ; then set -e    ; fi   # Exit immediately if non-zero exit status
if [[ "${DEBUG}" == "5" ]] ; then set -e -o pipefail ; fi   # Exit immediately if non-zero exit status and exit if any command in a pipeline errors
#
BOLD=$(tput -Txterm bold)
NORMAL=$(tput -Txterm sgr0)
RED=$(tput    setaf 1)
GREEN=$(tput  setaf 2)
YELLOW=$(tput setaf 3)
CYAN=$(tput   setaf 6)
WHITE=$(tput  setaf 7)

#    Date and time function ISO 8601
get_date_stamp() {
  DATE_STAMP=$(date +%Y-%m-%dT%H:%M:%S.%6N%:z)
  TEMP=$(date +%Z)
  DATE_STAMP="${DATE_STAMP} (${TEMP})"
}

#    Fully qualified domain name FQDN hostname
LOCALHOST=$(hostname -f)

#    Version
#    Assumptions for the next two lines of code:  The second line in this script includes the script path & name as the second item and
#    the script version as the third item separated with space(s).  The tool I use is called 'markit'. See example line below:
#       template/template.sh  3.517.783  2019-09-13T18:20:42.144356-05:00 (CDT)  https://github.com/BradleyA/user-files.git  uadmin  one-rpi3b.cptx86.com 3.516  
SCRIPT_NAME=$(head -2 "${0}" | awk '{printf $2}')  #  Different from ${COMMAND_NAME}=$(echo "${0}" | sed 's/^.*\///'), SCRIPT_NAME = includes Git repository directory and can be used any where in script (for dev, test teams)
SCRIPT_VERSION=$(head -2 "${0}" | awk '{printf $3}')
if [[ "${SCRIPT_NAME}" == "" ]] ; then SCRIPT_NAME="${0}" ; fi
if [[ "${SCRIPT_VERSION}" == "" ]] ; then SCRIPT_VERSION="v?.?" ; fi

#    GID
GROUP_ID=$(id -g)

###  Production standard 2.3.529 log format (WHEN WHERE WHAT Version Line WHO UID:GID [TYPE] Message)
new_message() {  #  $1="${LINENO}"  $2="DEBUG INFO ERROR WARN"  $3="message"
  get_date_stamp
  echo -e "${NORMAL}${DATE_STAMP} ${LOCALHOST} ${SCRIPT_NAME}[$$] ${SCRIPT_VERSION} ${1} ${USER} ${UID}:${GROUP_ID} ${BOLD}[${2}]${NORMAL}  ${3}"
}

#    INFO
if [[ "${DEBUG}" == "1" ]] ; then new_message "${LINENO}" "${YELLOW}INFO${WHITE}" "  Started..." 1>&2 ; fi

###

TEST_CASE_TMP_1=$(echo "${0}" | cut -d'/' -f"${REPOSITORY_DIR_COUNT}"-)
TEST_CASE_TMP_2=$(dirname -- "${TEST_CASE_TMP_1}")
TEST_CASE_TMP_3=$(basename -- "${TEST_CASE_TMP_1}")
TEST_CASE="${TEST_CASE_TMP_2}/${BOLD}${YELLOW}${TEST_CASE_TMP_3}${NORMAL}"
FILE_NAME_TMP_1=$(echo "${1}" | cut -d'/' -f"${REPOSITORY_DIR_COUNT}"-)
FILE_NAME_TMP_2=$(dirname -- "${FILE_NAME_TMP_1}")
FILE_NAME_TMP_3=$(basename -- "${FILE_NAME_TMP_1}")
FILE_NAME="${FILE_NAME_TMP_2}/${BOLD}${YELLOW}${FILE_NAME_TMP_3}${NORMAL}"

if [[ ! -x ${1} ]] ; then  #  Command invoked does not exist or cannot execute
  RETURN_CODE=126
  new_message "${LINENO}" "${RED}ERROR${WHITE}" "  ${RETURN_CODE} - File, ${1}, does not exist or have execute permission" 1>&2
  echo "${BOLD}${YELLOW}Test case --->${NORMAL} ${0} ${1} 126 - File, ${1}, does not exist or have execute permission - ${BOLD}${RED}ERROR${CYAN} - ERROR${NORMAL}"
  exit "${RETURN_CODE}"
fi

###  Place test case here

"${1}" usage >"${0}".test-case-output 2>&1

#    The option is functioning correctly:  if USAGE && NOT DESCRIPTION && DOCUMENTATION appear in "${0}".test-case-output 
if  grep -q 'USAGE' "${0}".test-case-output  ; then
  if  ! grep -q 'DESCRIPTION' "${0}".test-case-output  ; then
    if  ! grep -q 'DOCUMENTATION' "${0}".test-case-output  ; then
      echo "${BOLD}${YELLOW}Test case --->${NORMAL} ${TEST_CASE} ${FILE_NAME} 0 - USAGE found in output - ${BOLD}${GREEN}PASS - PASS${NORMAL}"
      exit 0
    else
      echo "${BOLD}${YELLOW}Test case --->${NORMAL} ${0} ${1} 1 - DOCUMENTATION found in output - ${BOLD}${RED}FAIL - FAIL${NORMAL}"
      exit 1
    fi
  else
    echo "${BOLD}${YELLOW}Test case --->${NORMAL} ${0} ${1} 1 - DESCRIPTION found in output - ${BOLD}${RED}FAIL - FAIL${NORMAL}"
    exit 1
  fi
else
  echo "${BOLD}${YELLOW}Test case --->${NORMAL} ${0} ${1} 1 - USAGE not found in output - ${BOLD}${RED}FAIL - FAIL${NORMAL}"
  exit 1
fi

echo "${BOLD}${YELLOW}Test case --->${NORMAL} ${0} ${1} 124 - Test script logic ERROR - ${BOLD}${RED}ERROR${CYAN} - ERROR${NORMAL}"
exit 124
###
