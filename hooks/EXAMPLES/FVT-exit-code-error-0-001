#!/bin/bash
#	hooks/EXAMPLES/FVT-exit-code-error-0-001  3.1.33.1579  2020-05-22T06:04:52.843483-05:00 (CDT)  https://github.com/BradleyA/git-TEST-commit-automation.git  master  uadmin  five-rpi3b.cptx86.com 3.1.32  
#	   hooks/EXAMPLES/FVT-exit-code-error-0-001 -->   upgrade Production standards #49  
#	hooks/EXAMPLES/FVT-exit-code-error-0-001  2.449.1345  2020-01-30T19:18:56.596782-06:00 (CST)  https://github.com/BradleyA/git-TEST-commit-automation.git  master  uadmin  five-rpi3b.cptx86.com 2.448-1-g55a513c  
#	   hooks/EXAMPLES/FVT-exit-code-error-*   add section does not support -* or help or usage or version 
#	hooks/EXAMPLES/FVT-exit-code-error-0-001  2.276.1076  2020-01-21T19:11:20.891128-06:00 (CST)  https://github.com/BradleyA/git-TEST-commit-automation.git  dev  uadmin  five-rpi3b.cptx86.com 2.275  
#	   FVT-*    Production standard 5.3.559 Copyright 
#	hooks/EXAMPLES/FVT-exit-code-error-0-001  2.266.1057  2020-01-19T12:18:57.680625-06:00 (CST)  https://github.com/BradleyA/git-TEST-commit-automation.git  dev  uadmin  five-rpi3b.cptx86.com 2.265  
#	   hooks/EXAMPLES/FVT-exit-code-error-*   Production standard 5.3.555 Copyright, Production standard 1.3.550 DEBUG variable, ###  Production standard 2.3.529 log format 
#	hooks/EXAMPLES/FVT-exit-code-error-0-001  2.138.787  2019-09-27T12:32:43.101840-05:00 (CDT)  https://github.com/BradleyA/git-TEST-commit-automation.git  uadmin  five-rpi3b.cptx86.com 2.137  
#	   close #34    EXAMPLES/SA-* FVT-*   added NO -x ${1} exit ERROR 126 
#	hooks/EXAMPLES/FVT-exit-code-error-0-001  2.114.615  2019-09-20T19:47:00.847737-05:00 (CDT)  https://github.com/BradleyA/git-TEST-commit-automation.git  uadmin  five-rpi3b.cptx86.com 2.113  
#	   close #16   hooks/EXAMPLES/FVT-exit-code-error-0-001   Done 
#86# hooks/EXAMPLES/FVT-exit-code-error-0-001  -  test case
###  Production standard 3.0 shellcheck
###  Production standard 5.3.559 Copyright                                    # 3.559
#    Copyright (c) 2020 Bradley Allen                                                # 3.555
#    MIT License is online in the repository as a file named LICENSE"         # 3.559
###  Production standard 1.3.550 DEBUG variable                                             # 3.550
#    Order of precedence: environment variable, default code
if [[ "${DEBUG}" == ""  ]] ; then DEBUG="0" ; fi   # 0 = debug off, 1 = debug on, 'export DEBUG=1', 'unset DEBUG' to unset environment variable (bash)
if [[ "${DEBUG}" == "2" ]] ; then set -x    ; fi   # Print trace of simple commands before they are executed
if [[ "${DEBUG}" == "3" ]] ; then set -v    ; fi   # Print shell input lines as they are read
if [[ "${DEBUG}" == "4" ]] ; then set -e    ; fi   # Exit immediately if non-zero exit status
if [[ "${DEBUG}" == "5" ]] ; then set -e -o pipefail ; fi   # Exit immediately if non-zero exit status and exit if any command in a pipeline errors
#
BOLD=$(tput -Txterm bold)
UNDERLINE=$(tput -Txterm sgr 0 1)  # 0.3.583
NORMAL=$(tput -Txterm sgr0)
RED=$(tput    setaf 1)
YELLOW=$(tput setaf 3)
BLUE=$(tput   setaf 4)
PURPLE=$(tput setaf 5)
CYAN=$(tput   setaf 6)
WHITE=$(tput  setaf 7)

#    Date and time function ISO 8601
get_date_stamp() {
  DATE_STAMP=$(date +%Y-%m-%dT%H:%M:%S.%6N%:z)
  TEMP=$(date +%Z)
  DATE_STAMP="${DATE_STAMP} (${TEMP})"
}

#    Fully qualified domain name FQDN hostname
LOCALHOST=$(hostname -f)

#    Version
#    Assumptions for the next two lines of code:  The second line in this script includes the script path & name as the second item and
#    the script version as the third item separated with space(s).  The tool I use is called 'markit'. See example line below:
#       template/template.sh  3.517.783  2019-09-13T18:20:42.144356-05:00 (CDT)  https://github.com/BradleyA/user-files.git  uadmin  one-rpi3b.cptx86.com 3.516  
SCRIPT_NAME=$(head -2 "${0}" | awk '{printf $2}')  #  Different from ${COMMAND_NAME}=$(echo "${0}" | sed 's/^.*\///'), SCRIPT_NAME = includes Git repository directory and can be used any where in script (for dev, test teams)
SCRIPT_VERSION=$(head -2 "${0}" | awk '{printf $3}')
if [[ "${SCRIPT_NAME}" == "" ]] ; then SCRIPT_NAME="${0}" ; fi
if [[ "${SCRIPT_VERSION}" == "" ]] ; then SCRIPT_VERSION="v?.?" ; fi

#    GID
GROUP_ID=$(id -g)

###  Production standard 2.3.578 Log format (WHEN WHERE WHAT Version Line WHO UID:GID [TYPE] Message)
new_message() {  #  $1="${LINENO}"  $2="DEBUG INFO ERROR WARN"  $3="message"
  get_date_stamp
  echo -e "${NORMAL}${DATE_STAMP} ${LOCALHOST} ${SCRIPT_NAME}[$$] ${BOLD}${BLUE}${SCRIPT_VERSION} ${PURPLE}${1}${NORMAL} ${USER} ${UID}:${GROUP_ID} ${BOLD}[${2}]${NORMAL}  ${3}"
}

#    INFO
if [[ "${DEBUG}" == "1" ]] ; then new_message "${LINENO}" "${YELLOW}INFO${WHITE}" "  Started..." 1>&2 ; fi

#    This script does not support -* or help or usage or version
if [[ "${1}" == -* ]] || [[ "${1}" == "help" ]] || [[ "${1}" == "usage" ]] || [[ "${1}" == "version" ]]  ; then
  new_message "${LINENO}" "${RED}ERROR${WHITE}" "  Option, ${YELLOW}${1}${WHITE}, is not supported with ${SCRIPT_NAME}." 1>&2
  #    User Hint
  echo -e "    For more information:\n${BOLD}${YELLOW}    ${UNDERLINE}https://github.com/BradleyA/git-TEST-commit-automation/tree/master/hooks#git-test-commit-automation------${NORMAL}"
  exit 1
fi

if [[ ! -x ${1} ]] ; then  #  Command invoked does not exist or cannot execute
  RETURN_CODE=126
  new_message "${LINENO}" "${RED}ERROR${WHITE}" "  ${RETURN_CODE} - File, ${1}, does not exist or have execute permission" 1>&2
  echo "${BOLD}${YELLOW}Test case --->${NORMAL} ${0} ${1} 126 - File, ${1}, does not exist or have execute permission - ${BOLD}${RED}ERROR${CYAN} - ERROR${NORMAL}"
  exit "${RETURN_CODE}"
fi

###     Appendix E. Exit Codes With Special Meanings
#       Exit      Meaning                            Example                    Comments
#       1         Catchall for general errors        let "var1 = 1/0"           Miscellaneous errors, such as "divide by zero" and other impermissible operations
#       2         Misuse of shell builtins           empty_function() {}        Missing keyword or command, or permission problem (and diff return code on a failed binary file comparison).
#       126       Command invoked cannot execute     /dev/null                  Permission problem or command is not an executable
#       127       "command not found"                illegal_command            Possible problem with $PATH or a typo
#       128       Invalid argument to exit           exit 3.14159               exit takes only integer args in the range 0 - 255
#       128+n     Fatal error signal "n"             kill -9 $PPID of script    $? returns 137 (128 + 9)
#       130       Script terminated by Control-C     Ctl-C                      Control-C is fatal error signal 2, (130 = 128 + 2, see above)
#       255*      Exit status out of range           exit -1                    exit takes only integer args in the range 0 - 255

###     Place test case here

echo "${BOLD}${YELLOW}Test case --->${NORMAL} ${0} ${1} 0 - exit code 0: report test case error exit code total - ${BOLD}${RED}ERROR${CYAN} - ERROR${NORMAL}"
exit 0
###
