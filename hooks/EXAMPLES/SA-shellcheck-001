#!/bin/bash
#	hooks/EXAMPLES/SA-shellcheck-001  2.94.553  2019-09-17T12:16:59.237567-05:00 (CDT)  https://github.com/BradleyA/git-TEST-commit-automation.git  uadmin  five-rpi3b.cptx86.com 2.93  
#	   close #18 close #19  hooks/bin/git-TEST-cases.sh   done with testing ready for production 
#	hooks/EXAMPLES/SA-shellcheck-001  2.65.489  2019-09-13T09:46:25.137946-05:00 (CDT)  https://github.com/BradleyA/git-TEST-commit-automation.git  uadmin  five-rpi3b.cptx86.com 2.64-18-ga5bfb20  
#	   hooks/EXAMPLES/SA-shellcheck-001 added comment about SA-shellcheck-001.expected file is REQUIRED in the test directory. 
#	hooks/EXAMPLES/SA-shellcheck-001  2.59.423  2019-09-08T22:15:43.170194-05:00 (CDT)  https://github.com/BradleyA/git-TEST-commit-automation.git  uadmin  five-rpi3b.cptx86.com 2.58  
#	   hooks/EXAMPLES/SA-*   add new_message 
#86# hooks/EXAMPLES/SA-shellcheck-001 - test case
###  Production standard 3.0 shellcheck
###  Production standard 5.1.160 Copyright
#    Copyright (c) 2019 Bradley Allen
#    MIT License is in the online DOCUMENTATION, DOCUMENTATION URL defined below.
###  Production standard 1.3.496 DEBUG variable
#    Order of precedence: environment variable, default code
if [[ "${DEBUG}" == ""  ]] ; then DEBUG="0" ; fi   # 0 = debug off, 1 = debug on, 'export DEBUG=1', 'unset DEBUG' to unset environment variable (bash)
if [[ "${DEBUG}" == "2" ]] ; then set -x    ; fi   # Print trace of simple commands before they are executed
if [[ "${DEBUG}" == "3" ]] ; then set -v    ; fi   # Print shell input lines as they are read
if [[ "${DEBUG}" == "4" ]] ; then set -e    ; fi   # Exit command has a non-zero exit status
#
BOLD=$(tput -Txterm bold)
NORMAL=$(tput -Txterm sgr0)
#    Date and time function ISO 8601
get_date_stamp() {
  DATE_STAMP=$(date +%Y-%m-%dT%H:%M:%S.%6N%:z)
  TEMP=$(date +%Z)
  DATE_STAMP="${DATE_STAMP} (${TEMP})"
}

#    Fully qualified domain name FQDN hostname
LOCALHOST=$(hostname -f)

#    Version
SCRIPT_NAME=$(head -2 "${0}" | awk '{printf $2}')
SCRIPT_VERSION=$(head -2 "${0}" | awk '{printf $3}')

#    UID and GID
USER_ID=$(id -u)
GROUP_ID=$(id -g)

###  Production standard 2.3.512 log format (WHEN WHERE WHAT Version Line WHO UID:GID [TYPE] Message)
new_message() {  #  $1="${SCRIPT_NAME}"  $2="${LINENO}"  $3="DEBUG INFO ERROR WARN"  $4="message"
  get_date_stamp
  echo -e "${NORMAL}${DATE_STAMP} ${LOCALHOST} ${1}[$$] ${SCRIPT_VERSION} ${2} ${USER} ${USER_ID}:${GROUP_ID} ${BOLD}[${3}]${NORMAL}  ${4}"
}

if [[ "${DEBUG}" == "1" ]] ; then new_message "${SCRIPT_NAME}" "${LINENO}" "DEBUG" "  Started..." 1>&2 ; fi

###  Place test case here

#    NOTE: SA-shellcheck-001.expected file is REQUIRED in the test directory.  Either an empty file if no error are expected or a file with expected errors

if [[ ! -e "${0}.expected" ]] ; then
  echo "${BOLD}Test case --->${NORMAL} ${0} ${1} ${RETURN_CODE} - ${0}.expected was not found.  Unable to compare shellcheck output - ${BOLD}ERROR - ERROR${NORMAL}"
  exit 2
fi

#>>>  add code here to remove all lines before the line including #86#
#>>>  mktemp file ???
#>>>  cp ${1} into temp-file
#>>>  sed -i '/#86#/,$!d' ./temp-file
#>>>  shellcheck "${./temp-file}" > "${0}".test-case-output  #  analyse code for potential errors
#>>>  diff "${0}".expected "${0}".test-case-output >/dev/null 2>&1

shellcheck "${1}" > "${0}".test-case-output  #  analyse code for potential errors

diff "${0}".expected "${0}".test-case-output >/dev/null 2>&1
RETURN_CODE=${?}

if [[ "${RETURN_CODE}" -eq 0 ]] ; then
  echo "${BOLD}Test case --->${NORMAL} ${0} ${1} ${RETURN_CODE} - No difference with expected output - ${BOLD}PASS - PASS${NORMAL}"
  cat "${0}".test-case-output
  exit 0
elif [[ ${RETURN_CODE} -eq 1 ]] ; then
  echo "${BOLD}Test case --->${NORMAL} ${0} ${1} ${RETURN_CODE} - Differences with expected output - ${BOLD}FAIL - FAIL${NORMAL}"
  diff -y "${0}".expected "${0}".test-case-output
  exit 1
else 
  echo "${BOLD}Test case --->${NORMAL} ${0} ${1} ${RETURN_CODE} - Test script ERROR - ${BOLD}ERROR - ERROR${NORMAL}"
  exit 2
fi

echo "${BOLD}Test case --->${NORMAL} ${0} ${1} 124 - Test script logic ERROR - ${BOLD}ERROR - ERROR${NORMAL}"
exit 124
###
