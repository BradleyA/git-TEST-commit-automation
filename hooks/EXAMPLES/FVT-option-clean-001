#!/bin/bash
#	hooks/EXAMPLES/FVT-option-clean-001  3.1.271.2030  2020-12-04T22:50:01.525609-06:00 (CST)  https://github.com/BradleyA/git-TEST-commit-automation.git  master  uadmin  five-rpi3b.cptx86.com 3.1.270  
#	   hooks/EXAMPLES/FVT-option-clean-001 hooks/EXAMPLES/FVT-option-clean-002 hooks/EXAMPLES/FVT-option-clean-hooks-001 hooks/EXAMPLES/FVT-option-clean-hooks-002 hooks/EXAMPLES/FVT-option-clean-hooks-003 hooks/EXAMPLES/FVT-option-clean-hooks-004 -->   Production standard 1.3.614 DEBUG variable  Production standard 2.3.614 Log format (WHEN WHERE WHAT Version Line WHO UID:GID [TYPE] Message)  
#	hooks/EXAMPLES/FVT-option-clean-001  3.1.46.1592  2020-05-22T06:56:27.685507-05:00 (CDT)  https://github.com/BradleyA/git-TEST-commit-automation.git  master  uadmin  five-rpi3b.cptx86.com 3.1.45  
#	   hooks/EXAMPLES/FVT-option-clean-001 -->   upgrade Production standards #49  
#	hooks/EXAMPLES/FVT-option-clean-001  2.526.1469  2020-02-03T15:12:43.634569-06:00 (CST)  https://github.com/BradleyA/git-TEST-commit-automation.git  master  uadmin  five-rpi3b.cptx86.com 2.525  
#	   hooks/EXAMPLES/FVT-option-clean-001   corrected shellcheck test case incident 
#	hooks/EXAMPLES/FVT-option-clean-001  2.509.1442  2020-02-03T10:11:57.338554-06:00 (CST)  https://github.com/BradleyA/git-TEST-commit-automation.git  master  uadmin  five-rpi3b.cptx86.com 2.508  
#	   hooks/EXAMPLES/FVT-option-*   Increase the depth in these test cases 
#	hooks/EXAMPLES/FVT-option-clean-001  2.452.1348  2020-01-30T20:18:31.904153-06:00 (CST)  https://github.com/BradleyA/git-TEST-commit-automation.git  master  uadmin  five-rpi3b.cptx86.com 2.451  
#	   hooks/EXAMPLES/FVT-option-clean-00?   added This script does not support -* or help or usage or version 
#	hooks/EXAMPLES/FVT-option-clean-001  2.433.1324  2020-01-27T23:55:49.788247-06:00 (CST)  https://github.com/BradleyA/git-TEST-commit-automation.git  master  uadmin  five-rpi3b.cptx86.com 2.432  
#	   Use short test case name 
#86# hooks/bin/TEST/git-TEST-cases.sh/FVT-option-clean-001  -  custom test case
###  Production standard 3.0 shellcheck
###  Production standard 5.3.559 Copyright                                    # 3.559
#    Copyright (c) 2020 Bradley Allen                                                # 3.555
#    MIT License is online in the repository as a file named LICENSE"         # 3.559
###  Production standard 1.3.614 DEBUG variable
#    Order of precedence: environment variable, default code
if [[ "${DEBUG}" == ""  ]] ; then DEBUG="0" ; fi   # 0 = debug off, 1 = debug on, 'export DEBUG=1', 'unset DEBUG' to unset environment variable (bash)
if [[ "${DEBUG}" == "2" ]] ; then set -x    ; fi   # Print trace of simple commands before they are executed
if [[ "${DEBUG}" == "3" ]] ; then set -v    ; fi   # Print shell input lines as they are read
if [[ "${DEBUG}" == "4" ]] ; then set -e    ; fi   # Exit immediately if non-zero exit status
if [[ "${DEBUG}" == "5" ]] ; then set -e -o pipefail ; fi   # Exit immediately if non-zero exit status and exit if any command in a pipeline errors
#
BOLD=$(tput -Txterm bold)
UNDERLINE=$(tput -Txterm sgr 0 1)  # 0.3.583
NORMAL=$(tput -Txterm sgr0)
RED=$(tput    setaf 1)
GREEN=$(tput  setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput   setaf 4)
PURPLE=$(tput setaf 5)
CYAN=$(tput   setaf 6)
WHITE=$(tput  setaf 7)

#    Date and time function ISO 8601
get_date_stamp() {
  DATE_STAMP=$(date +%Y-%m-%dT%H:%M:%S.%6N%:z)
  TEMP=$(date +%Z)
  DATE_STAMP="${DATE_STAMP} (${TEMP})"
}

#    Fully qualified domain name FQDN hostname
LOCALHOST=$(hostname -f)

#    Version
#    Assumptions for the next two lines of code:  The second line in this script includes the script path & name as the second item and
#    the script version as the third item separated with space(s).  The tool I use is called 'markit'. See example line below:
#       template/template.sh  3.517.783  2019-09-13T18:20:42.144356-05:00 (CDT)  https://github.com/BradleyA/user-files.git  uadmin  one-rpi3b.cptx86.com 3.516  
SCRIPT_NAME=$(head -2 "${0}" | awk '{printf $2}')  #  Different from ${COMMAND_NAME}=$(echo "${0}" | sed 's/^.*\///'), SCRIPT_NAME = includes Git repository directory and can be used any where in script (for dev, test teams)
SCRIPT_VERSION=$(head -2 "${0}" | awk '{printf $3}')
if [[ "${SCRIPT_NAME}" == "" ]] ; then SCRIPT_NAME="${0}" ; fi
if [[ "${SCRIPT_VERSION}" == "" ]] ; then SCRIPT_VERSION="v?.?" ; fi

#    GID
GROUP_ID=$(id -g)

###  Production standard 2.3.614 Log format (WHEN WHERE WHAT Version Line WHO UID:GID [TYPE] Message)
new_message() {  #  $1="${LINENO}"  $2="DEBUG INFO ERROR WARN"  $3="message"
  get_date_stamp
  echo -e "${NORMAL}${DATE_STAMP} ${LOCALHOST} ${BOLD}${CYAN}${SCRIPT_NAME}${NORMAL}[$$] ${BOLD}${BLUE}${SCRIPT_VERSION} ${PURPLE}${1}${NORMAL} ${USER} ${UID}:${GROUP_ID} ${BOLD}[${2}]${NORMAL}  ${3}"  # 2.3.614
}

#    INFO
if [[ "${DEBUG}" == "1" ]] ; then new_message "${LINENO}" "${YELLOW}INFO${WHITE}" "${BOLD}${CYAN}  Started...${NORMAL}" 1>&2 ; fi  # 1.3.614

#    This script does not support -* or help or usage or version
if [[ "${1}" == -* ]] || [[ "${1}" == "help" ]] || [[ "${1}" == "usage" ]] || [[ "${1}" == "version" ]]  ; then
  new_message "${LINENO}" "${RED}ERROR${WHITE}" "  Option, ${YELLOW}${1}${WHITE}, is not supported with ${SCRIPT_NAME}." 1>&2
  #    User Hint
  echo -e "    For more information:\n${BOLD}${YELLOW}    ${UNDERLINE}https://github.com/BradleyA/git-TEST-commit-automation/tree/master/hooks#git-test-commit-automation------${NORMAL}"
  exit 1
fi

if [[ "${DEBUG}" == "1" ]] ; then new_message "${LINENO}" "${YELLOW}DEBUG${WHITE}" "${BOLD}  REPOSITORY_ABSOLUTE_PATH >${BOLD}${CYAN}${REPOSITORY_ABSOLUTE_PATH}${NORMAL}<  REPOSITORY_DIR_COUNT  >${BOLD}${CYAN}${REPOSITORY_DIR_COUNT}${NORMAL}<  EXAMPLES_DIRECTORY >${BOLD}${CYAN}${EXAMPLES_DIRECTORY}${NORMAL}<" 1>&2 ; fi  # 1.3.614

###

TEST_CASE_TMP_1=$(echo "${0}" | cut -d'/' -f"${REPOSITORY_DIR_COUNT}"-)
TEST_CASE_TMP_2=$(dirname -- "${TEST_CASE_TMP_1}")
TEST_CASE_TMP_3=$(basename -- "${TEST_CASE_TMP_1}")
TEST_CASE="${TEST_CASE_TMP_2}/${BOLD}${YELLOW}${TEST_CASE_TMP_3}${NORMAL}"
FILE_NAME_TMP_1=$(echo "${1}" | cut -d'/' -f"${REPOSITORY_DIR_COUNT}"-)
FILE_NAME_TMP_3=$(basename -- "${FILE_NAME_TMP_1}")
FILE_NAME="${BOLD}${YELLOW}${FILE_NAME_TMP_3}${NORMAL}"

if [[ ! -x ${1} ]] ; then  #  Command invoked does not exist or cannot execute
  RETURN_CODE=126
  new_message "${LINENO}" "${RED}ERROR${WHITE}" "  ${RETURN_CODE} - File, ${1}, does not exist or have execute permission" 1>&2
  echo "${BOLD}${YELLOW}Test case --->${NORMAL} ${0} ${FILE_NAME} 126 - File, ${FILE_NAME}, does not exist or have execute permission - ${BOLD}${RED}ERROR${CYAN} - ERROR${NORMAL}"
  exit "${RETURN_CODE}"
fi

###  Place test case here

#    Create a directory that IS NOT in the hooks directory and includes a file that DOES have EXAMPLES and custom test cases, and test case setup and cleanup scripts with one begin custom
#    Test case types are custom and EXAMPLES test cases.  Other files are test case setup and cleanup scripts with one begin custom
if [[ "${DEBUG}" == "1" ]] ; then new_message "${LINENO}" "${YELLOW}DEBUG${WHITE}" "  EXAMPLES_DIRECTORY is exported in post-commit script >${BOLD}${CYAN}${EXAMPLES_DIRECTORY}${NORMAL}<" 1>&2 ; fi  # 1.3.614
COMMAND_NAME=$(echo "${0}" | sed 's/^.*\///')
mkdir -p "${EXAMPLES_DIRECTORY}"/tmp_DIR_"${COMMAND_NAME}"/TEST/tmp_CMD_"${COMMAND_NAME}"
ln -fs   "${EXAMPLES_DIRECTORY}"/hooks/EXAMPLES/SA-setup.sh             "${EXAMPLES_DIRECTORY}"/tmp_DIR_"${COMMAND_NAME}"/TEST/tmp_CMD_"${COMMAND_NAME}"/SA-setup.sh
ln -fs   "${EXAMPLES_DIRECTORY}"/hooks/EXAMPLES/SA-cleanup.sh           "${EXAMPLES_DIRECTORY}"/tmp_DIR_"${COMMAND_NAME}"/TEST/tmp_CMD_"${COMMAND_NAME}"/SA-cleanup.sh
ln -fs   "${EXAMPLES_DIRECTORY}"/hooks/EXAMPLES/SA-permission-775-001   "${EXAMPLES_DIRECTORY}"/tmp_DIR_"${COMMAND_NAME}"/TEST/tmp_CMD_"${COMMAND_NAME}"/SA-permission-775-001
ln -fs   "${EXAMPLES_DIRECTORY}"/hooks/EXAMPLES/SA-shellcheck-001       "${EXAMPLES_DIRECTORY}"/tmp_DIR_"${COMMAND_NAME}"/TEST/tmp_CMD_"${COMMAND_NAME}"/SA-shellcheck-001
echo     "#!/bin/bash" >                                            "${EXAMPLES_DIRECTORY}"/tmp_DIR_"${COMMAND_NAME}"/TEST/tmp_CMD_"${COMMAND_NAME}"/FVT-setup.sh
ln -fs   "${EXAMPLES_DIRECTORY}"/hooks/EXAMPLES/FVT-cleanup.sh          "${EXAMPLES_DIRECTORY}"/tmp_DIR_"${COMMAND_NAME}"/TEST/tmp_CMD_"${COMMAND_NAME}"/FVT-cleanup.sh
ln -fs   "${EXAMPLES_DIRECTORY}"/hooks/EXAMPLES/FVT-option-help-001     "${EXAMPLES_DIRECTORY}"/tmp_DIR_"${COMMAND_NAME}"/TEST/tmp_CMD_"${COMMAND_NAME}"/FVT-option-help-001
ln -fs   "${EXAMPLES_DIRECTORY}"/hooks/EXAMPLES/FVT-option-version-001  "${EXAMPLES_DIRECTORY}"/tmp_DIR_"${COMMAND_NAME}"/TEST/tmp_CMD_"${COMMAND_NAME}"/FVT-option-version-001
echo     "#!/bin/bash" >                                            "${EXAMPLES_DIRECTORY}"/tmp_DIR_"${COMMAND_NAME}"/TEST/tmp_CMD_"${COMMAND_NAME}"/SA-custom-test-case-001
echo     "#!/bin/bash" >                                            "${EXAMPLES_DIRECTORY}"/tmp_DIR_"${COMMAND_NAME}"/TEST/tmp_CMD_"${COMMAND_NAME}"/FVT-custom-test-case-001
#    Create custom file
echo     "#!/bin/bash" >                                            "${EXAMPLES_DIRECTORY}"/tmp_DIR_"${COMMAND_NAME}"/tmp_CMD_"${COMMAND_NAME}"
if [[ "${DEBUG}" == "1" ]] ; then new_message "${LINENO}" "${YELLOW}DEBUG${WHITE}" "  COMMAND_NAME >${BOLD}${CYAN}${COMMAND_NAME}${NORMAL}<  ${EXAMPLES_DIRECTORY}/tmp_DIR_${COMMAND_NAME}/TEST/tmp_CMD_${COMMAND_NAME}" 1>&2 ; fi  # 1.3.614

FVT_TEST_INPUT="${1} -c"

eval "${FVT_TEST_INPUT}" >"${0}".test-case-output 2>&1

FILE_COUNT=$(ls -1 "${EXAMPLES_DIRECTORY}"/tmp_DIR_"${COMMAND_NAME}"/TEST/tmp_CMD_"${COMMAND_NAME}" | wc -l)
rm -r  "${EXAMPLES_DIRECTORY}"/tmp_DIR_"${COMMAND_NAME}"  #  Remove test case files in ${EXAMPLES_DIRECTORY}/tmp_DIR_${COMMAND_NAME}

if [[ -s ${1} ]] ; then  #  file size is greater than zero
  if [[ "${FILE_COUNT}" == 6 ]] ; then  #  Directory had 4 files, --c/-clean then 2 test cases setup and cleanup are not removed
    RETURN_CODE=0
  else
    RETURN_CODE=1
  fi
else
  new_message "${LINENO}" "${RED}ERROR${WHITE}" "  File, ${1}, does not exist or is empty" 1>&2
  RETURN_CODE=2
fi

if [[ "${RETURN_CODE}" -eq 0 ]] ; then
  echo "${BOLD}${YELLOW}Test case --->${NORMAL} ${TEST_CASE} ${FILE_NAME} 0 - No difference with expected output, ${FVT_TEST_INPUT} - ${BOLD}${GREEN}PASS - PASS${NORMAL}"
  if [[ "${DEBUG}" == "1" ]] ; then cat "${0}".test-case-output 1>&2 ; fi  # 1.3.614
  exit 0
elif [[ ${RETURN_CODE} -eq 1 ]] ; then
  echo "${BOLD}${YELLOW}Test case --->${NORMAL} ${0} ${FILE_NAME} 1 - Differences with expected output, ${FVT_TEST_INPUT} - ${BOLD}${RED}FAIL - FAIL${NORMAL}"
  diff -y "${0}".expected "${0}".test-case-output
  exit 1
else
  echo "${BOLD}${YELLOW}Test case --->${NORMAL} ${0} ${FILE_NAME} 2 - Test script ERROR - ${BOLD}${RED}ERROR${CYAN} - ERROR${NORMAL}"
  exit 2
fi
echo "${BOLD}${YELLOW}Test case --->${NORMAL} ${0} ${FILE_NAME} 124 - Test script logic ERROR - ${BOLD}${RED}ERROR${CYAN} - ERROR${NORMAL}"
exit 124
###
