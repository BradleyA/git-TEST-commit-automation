#!/bin/bash
#	hooks/post-commit  2.20.298  2019-09-01T22:57:33.509641-05:00 (CDT)  https://github.com/BradleyA/git-TEST-commit-automation.git  uadmin  five-rpi3b.cptx86.com 2.19  
#	   hooks/post-commit  testing --problem was in test case reporting exit 124 but should be been 2 close #4 
#	hooks/post-commit  2.8.286  2019-09-01T18:38:10.870847-05:00 (CDT)  https://github.com/BradleyA/git-TEST-commit-automation.git  uadmin  five-rpi3b.cptx86.com 2.7  
#	   hooks/post-commit  change tab to two spaces update Production standard 1.3.475 DEBUG variable 
###  hooks/post-commit - Create production standard TESTing using .git/hooks #26 
#  post-commit - (git hook) run test cases if found
#      Loop through committed files found in COMMIT_FILE_LIST
#        - Note: pre-commit (git hook) created ${REPOSITORY_DIR}/hooks/COMMIT_FILE_LIST
#          Check if COMMIT_FILE has a 'TEST' directory
#              Create list of test cases
#                  Links *.expected (test case output) to other test cases requiring the same test case output
#                      Loop through _TEST_CASE
#                          Run _TEST_CASE
###  Production standard 3.0 shellcheck
###  Production standard 5.1.160 Copyright
#    Copyright (c) 2019 Bradley Allen
#    MIT License is in the online DOCUMENTATION, DOCUMENTATION URL defined below.
###  Production standard 1.3.475 DEBUG variable
#    Order of precedence: environment variable, default code
if [[ "${DEBUG}" == ""  ]] ; then DEBUG="0" ; fi   # 0 = debug off, 1 = debug on, 'export DEBUG=1', 'unset DEBUG' to unset environment variable (bash)
if [[ "${DEBUG}" == "2" ]] ; then set -x    ; fi   # Print trace of simple commands before they are executed
if [[ "${DEBUG}" == "3" ]] ; then set -v    ; fi   # Print shell input lines as they are read
#
BOLD=$(tput -Txterm bold)
NORMAL=$(tput -Txterm sgr0)

#    Date and time function ISO 8601
get_date_stamp() {
  DATE_STAMP=$(date +%Y-%m-%dT%H:%M:%S.%6N%:z)
  TEMP=$(date +%Z)
  DATE_STAMP="${DATE_STAMP} (${TEMP})"
}

#    Fully qualified domain name FQDN hostname
LOCALHOST=$(hostname -f)

#    Version
SCRIPT_VERSION=$(head -2 "${0}" | awk '{printf $3}')

if [[ "${DEBUG}" == "1" ]] ; then get_date_stamp ; echo -e "${NORMAL}${DATE_STAMP} ${LOCALHOST} ${0}[$$] ${SCRIPT_VERSION} ${LINENO} ${USER} ${USER_ID}:${GROUP_ID} ${BOLD}[DEBUG]${NORMAL}  Operation started." 1>&2 ; fi

###  Production standard 10.0 TESTing 

REPOSITORY_DIR=$(git rev-parse --show-toplevel)
if [[ ! -r "${REPOSITORY_DIR}/hooks/COMMIT_FILE_LIST" ]] ; then echo "COMMIT_FILE_LIST is created by pre-commit (git hook) and is required input for this script." ; exit 1 ; fi
COMMIT_FILE_LIST=$(cat "${REPOSITORY_DIR}"/hooks/COMMIT_FILE_LIST)

if [[ "${DEBUG}" == "1" ]] ; then get_date_stamp ; echo -e "${NORMAL}${DATE_STAMP} ${LOCALHOST} ${0}[$$] ${SCRIPT_VERSION} ${LINENO} ${USER} ${BOLD}[DEBUG]${NORMAL}  Files being committed hy ${GIT_AUTHOR_NAME} (${USER}): >${COMMIT_FILE_LIST}<" 1>&2 ; fi
echo    "'####:'##::: ##:::::::'########:'########::'######::'########:"
echo    ". ##:: ###:: ##:::::::... ##..:: ##.....::'##... ##:... ##..::"
echo    ": ##:: ####: ##:::::::::: ##:::: ##::::::: ##:::..::::: ##::::"
echo    ": ##:: ## ## ##:::::::::: ##:::: ######:::. ######::::: ##::::"
echo    ": ##:: ##. ####:::::::::: ##:::: ##...:::::..... ##:::: ##::::"
echo    ": ##:: ##:. ###:::::::::: ##:::: ##:::::::'##::: ##:::: ##::::"
echo    "'####: ##::. ##:::::::::: ##:::: ########:. ######::::: ##::::"
echo    "....::..::::..:::::::::::..:::::........:::......::::::..:::::"

#    Loop through committed files found in COMMIT_FILE_LIST
#    - Note: pre-commit (git hook) created ${REPOSITORY_DIR}/hooks/COMMIT_FILE_LIST
for COMMIT_PATH_FILE_NAME in ${COMMIT_FILE_LIST} ; do
  COMMIT_FILE_NAME=$(echo "${COMMIT_PATH_FILE_NAME}" | rev | cut -d '/' -f 1 | rev)  # Did not use baseline becasue I did not want to eliminate directories with a dot trailing SUFFIX
  COMMIT_PATH="${COMMIT_PATH_FILE_NAME//${COMMIT_FILE_NAME}/}"
  if [[ "${DEBUG}" == "1" ]] ; then get_date_stamp ; echo -e "${NORMAL}${DATE_STAMP} ${LOCALHOST} ${0}[$$] ${SCRIPT_VERSION} ${LINENO} ${USER} ${BOLD}[DEBUG]${NORMAL}  \${COMMIT_PATH_FILE_NAME} >${COMMIT_PATH_FILE_NAME}< \${COMMIT_FILE_NAME} >${COMMIT_FILE_NAME}< \${COMMIT_PATH} >${COMMIT_PATH}< \${COMMIT_PATH}TEST/\${COMMIT_FILE_NAME} >${COMMIT_PATH}TEST/${COMMIT_FILE_NAME}<" 1>&2 ; fi
  #    Check if COMMIT_FILE has a 'TEST' directory
  if [[ -d "${REPOSITORY_DIR}/${COMMIT_PATH}TEST/${COMMIT_FILE_NAME}" ]] ; then
    get_date_stamp ; echo -e "${DATE_STAMP} ${LOCALHOST} ${0}[$$] ${SCRIPT_VERSION} ${LINENO} ${USER} ${BOLD}[INFO]  Test case directory found${NORMAL} (${COMMIT_PATH}TEST/${COMMIT_FILE_NAME}) for ${GIT_AUTHOR_NAME} (${USER})."
    cd "${REPOSITORY_DIR}/${COMMIT_PATH}TEST/${COMMIT_FILE_NAME}"

    ###  SA (Static Analysis)
    #    run SA-setup.sh if found
    if [[ -s "${REPOSITORY_DIR}/${COMMIT_PATH}TEST/${COMMIT_FILE_NAME}/SA-setup.sh" ]] ; then
      "${REPOSITORY_DIR}/${COMMIT_PATH}TEST/${COMMIT_FILE_NAME}/SA-setup.sh" "${REPOSITORY_DIR}"
    fi
    #    Create list of test cases
    SA_TEST_CASES=$(ls -1 | grep "^SA" | grep -v "\.")
    if [[ "${DEBUG}" == "1" ]] ; then get_date_stamp ; echo -e "${NORMAL}${DATE_STAMP} ${LOCALHOST} ${0}[$$] ${SCRIPT_VERSION} ${LINENO} ${USER} ${BOLD}[DEBUG]${NORMAL}  \${SA_TEST_CASES} >${SA_TEST_CASES}<" 1>&2 ; fi
    NO_TEST_CASES=$(ls -1 | grep "^SA" | grep -v "\." -c)
    NO_TEST_CASES_PASS=0
    NO_TEST_CASES_FAIL=0
    NO_TEST_CASES_ERROR=0
    TEST_CASES_ERROR_EXIT_CODE=""
    #    Loop through test cases
    for SA_TEST_CASE in ${SA_TEST_CASES} ; do
      #    Run SA_TEST_CASE(s)
      if [[ "${DEBUG}" == "1" ]] ; then get_date_stamp ; echo -e "${NORMAL}${DATE_STAMP} ${LOCALHOST} ${0}[$$] ${SCRIPT_VERSION} ${LINENO} ${USER} ${BOLD}[DEBUG]${NORMAL}  \${REPOSITORY_DIR}/\${COMMIT_PATH}TEST/\${COMMIT_FILE_NAME}/\${SA_TEST_CASE} >${REPOSITORY_DIR}/${COMMIT_PATH}TEST/${COMMIT_FILE_NAME}/${SA_TEST_CASE}< \${REPOSITORY_DIR}/${COMMIT_PATH_FILE_NAME} >${REPOSITORY_DIR}/${COMMIT_PATH_FILE_NAME}<" 1>&2 ; fi
      TEST_CASE="${REPOSITORY_DIR}/${COMMIT_PATH}TEST/${COMMIT_FILE_NAME}/${SA_TEST_CASE} ${REPOSITORY_DIR}/${COMMIT_PATH_FILE_NAME}"
      eval "${TEST_CASE}"
      EXIT_CODE=${?}
      if [[ "${DEBUG}" == "1" ]] ; then get_date_stamp ; echo -e "${NORMAL}${DATE_STAMP} ${LOCALHOST} ${0}[$$] ${SCRIPT_VERSION} ${LINENO} ${USER} ${BOLD}[DEBUG]${NORMAL}  \${EXIT_CODE} >${EXIT_CODE}<" 1>&2 ; fi
      if [[ ${EXIT_CODE} -eq 0 ]] ; then
        NO_TEST_CASES_PASS=$((NO_TEST_CASES_PASS+1))
      elif [[ ${EXIT_CODE} -eq 1 ]] ; then
        NO_TEST_CASES_FAIL=$((NO_TEST_CASES_FAIL+1))
      else
        NO_TEST_CASES_ERROR=$((NO_TEST_CASES_ERROR+1))
        TEST_CASES_ERROR_EXIT_CODE="${TEST_CASES_ERROR_EXIT_CODE}${EXIT_CODE} "
      fi
    done
    echo -e "\n>>>  SA: ${BOLD}${COMMIT_FILE_NAME}${NORMAL}\n   Number of test cases = ${NO_TEST_CASES}\n   Number of test cases pass = ${NO_TEST_CASES_PASS}\n   Number of test cases fail = ${NO_TEST_CASES_FAIL}\n   Number of test cases error = ${NO_TEST_CASES_ERROR}"
    echo  "${TEST_CASES_ERROR_EXIT_CODE}" | tr ' ' '\n' | grep '[^[:blank:]]' | sort | uniq -c | sort -k 2 -n  #  List error exit codes and how many of each exit code

    ###  FVT (Function Verification Test)
    #    run FVT-setup.sh if found
    if [[ -s "${REPOSITORY_DIR}/${COMMIT_PATH}TEST/${COMMIT_FILE_NAME}/FVT-setup.sh" ]] ; then
      "${REPOSITORY_DIR}/${COMMIT_PATH}TEST/${COMMIT_FILE_NAME}/FVT-setup.sh" "${REPOSITORY_DIR}"
    fi
    #    Create list of FVT test cases
    FVT_TEST_CASES=$(ls -1 | grep "^FVT" | grep -v "\.")
    if [[ "${DEBUG}" == "1" ]] ; then get_date_stamp ; echo -e "${NORMAL}${DATE_STAMP} ${LOCALHOST} ${0}[$$] ${SCRIPT_VERSION} ${LINENO} ${USER} ${BOLD}[DEBUG]${NORMAL}  \${FVT_TEST_CASES} >${FVT_TEST_CASES}<" 1>&2 ; fi
    NO_TEST_CASES=$(ls -1 | grep "^FVT" | grep -v "\." -c)
    NO_TEST_CASES_PASS=0
    NO_TEST_CASES_FAIL=0
    NO_TEST_CASES_ERROR=0
    TEST_CASES_ERROR_EXIT_CODE=""
    #    Loop through FVT_TEST_CASES
    for FVT_TEST_CASE in ${FVT_TEST_CASES} ; do
      #    Run FVT_TEST_CASE(s)
      if [[ "${DEBUG}" == "1" ]] ; then get_date_stamp ; echo -e "${NORMAL}${DATE_STAMP} ${LOCALHOST} ${0}[$$] ${SCRIPT_VERSION} ${LINENO} ${USER} ${BOLD}[DEBUG]${NORMAL}  \${REPOSITORY_DIR}/\${COMMIT_PATH}TEST/\${COMMIT_FILE_NAME}/\${FVT_TEST_CASE} >${REPOSITORY_DIR}/${COMMIT_PATH}TEST/${COMMIT_FILE_NAME}/${FVT_TEST_CASE}< \${REPOSITORY_DIR}/${COMMIT_PATH_FILE_NAME} >${REPOSITORY_DIR}/${COMMIT_PATH_FILE_NAME}<" 1>&2 ; fi
      TEST_CASE="${REPOSITORY_DIR}/${COMMIT_PATH}TEST/${COMMIT_FILE_NAME}/${FVT_TEST_CASE} ${REPOSITORY_DIR}/${COMMIT_PATH_FILE_NAME}"
      eval "${TEST_CASE}"
      EXIT_CODE=${?}
      if [[ "${DEBUG}" == "1" ]] ; then get_date_stamp ; echo -e "${NORMAL}${DATE_STAMP} ${LOCALHOST} ${0}[$$] ${SCRIPT_VERSION} ${LINENO} ${USER} ${BOLD}[DEBUG]${NORMAL}  \${EXIT_CODE} >${EXIT_CODE}<" 1>&2 ; fi
      if [[ ${EXIT_CODE} -eq 0 ]] ; then
        NO_TEST_CASES_PASS=$((NO_TEST_CASES_PASS+1))
      elif  [[ ${EXIT_CODE} -eq 1 ]] ; then
        NO_TEST_CASES_FAIL=$((NO_TEST_CASES_FAIL+1))
      else
        NO_TEST_CASES_ERROR=$((NO_TEST_CASES_ERROR+1))
        TEST_CASES_ERROR_EXIT_CODE="${TEST_CASES_ERROR_EXIT_CODE}${EXIT_CODE} "
      fi
    done
    echo -e "\n>>>  FVT: ${BOLD}${COMMIT_FILE_NAME}${NORMAL}\n   Number of test cases = ${NO_TEST_CASES}\n   Number of test cases pass = ${NO_TEST_CASES_PASS}\n   Number of test cases fail = ${NO_TEST_CASES_FAIL}\n   Number of test cases error = ${NO_TEST_CASES_ERROR}"
    echo  "${TEST_CASES_ERROR_EXIT_CODE}" | tr ' ' '\n' | grep '[^[:blank:]]' | sort | uniq -c | sort -k 2 -n  #  List error exit codes and how many of each exit code
  else
    get_date_stamp ; echo -e "${DATE_STAMP} ${LOCALHOST} ${0}[$$] ${SCRIPT_VERSION} ${LINENO} ${USER} ${BOLD}[INFO]  No test case directory found${NORMAL} in ${COMMIT_PATH}TEST/${COMMIT_FILE_NAME}, for ${GIT_AUTHOR_NAME}."
  fi
done
if [[ ! "${DEBUG}" == "1" ]] ; then  rm "${REPOSITORY_DIR}"/hooks/COMMIT_FILE_LIST ; fi #  Remove COMMIT_FILE_LIST if NOT in DEBUG

#    Process times
echo -e "\n>>>  CPU Time    \n  user     sys"
times

#
if [[ "${DEBUG}" == "1" ]] ; then get_date_stamp ; echo -e "${NORMAL}${DATE_STAMP} ${LOCALHOST} ${0}[$$] ${SCRIPT_VERSION} ${LINENO} ${USER} ${USER_ID}:${GROUP_ID} ${BOLD}[DEBUG]${NORMAL}  Operation finished." 1>&2 ; fi
###
