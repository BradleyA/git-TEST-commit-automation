#!/bin/bash
#	hooks/post-commit  3.1.223.1971  2020-12-03T19:25:02.622038-06:00 (CST)  https://github.com/BradleyA/git-TEST-commit-automation.git  master  uadmin  five-rpi3b.cptx86.com 3.1.222  
#	   hooks/post-commit -->   change DEBUG output format  
#	hooks/post-commit  3.1.222.1970  2020-12-03T19:04:04.968520-06:00 (CST)  https://github.com/BradleyA/git-TEST-commit-automation.git  master  uadmin  five-rpi3b.cptx86.com 3.1.221  
#	   hooks/EXAMPLES/SA-setup.sh hooks/post-commit -->   changing REPOSITORY_RELATIVE_PATH to EXAMPLES_DIRECTORY  
#	hooks/post-commit  3.1.220.1968  2020-12-03T17:13:23.694747-06:00 (CST)  https://github.com/BradleyA/git-TEST-commit-automation.git  master  uadmin  five-rpi3b.cptx86.com 3.1.219  
#	   hooks/post-commit -->   typo  
#	hooks/post-commit  3.1.219.1967  2020-12-03T17:01:45.196945-06:00 (CST)  https://github.com/BradleyA/git-TEST-commit-automation.git  master  uadmin  five-rpi3b.cptx86.com 3.1.218  
#	   hooks/post-commit -->   ###  Production standard 2.3.614 Log format (WHEN WHERE WHAT Version Line WHO UID:GID [TYPE] Message)  
#	hooks/post-commit  2.373.1261  2020-01-25T21:40:56.673970-06:00 (CST)  https://github.com/BradleyA/git-TEST-commit-automation.git  master  uadmin  five-rpi3b.cptx86.com 2.372  
#	   hooks/post-commit   Production standard 5.3.559 Copyright  Production standard 1.3.550 DEBUG variable  Production standard 2.3.529 log format 
#	hooks/post-commit  2.328.1206  2020-01-23T23:13:49.393804-06:00 (CST)  https://github.com/BradleyA/git-TEST-commit-automation.git  master  uadmin  five-rpi3b.cptx86.com 2.327  
#	   hooks/post-commit   export REPOSITORY_ABSOLUTE_PATH so test scripts can use it 
###  hooks/post-commit - Create production standard TESTing using .git/hooks #26 
#  post-commit - (git hook) run test cases if found
#      Loop through committed files found in COMMIT_FILE_LIST
#        - Note: pre-commit (git hook) created ${REPOSITORY_ABSOLUTE_PATH}/hooks/COMMIT_FILE_LIST
#          Check if COMMIT_FILE has a 'TEST' directory
#              Create list of test cases
#                  Links *.expected (test case output) to other test cases requiring the same test case output
#                      Loop through _TEST_CASE
#                          Run _TEST_CASE
###  Production standard 3.0 shellcheck
###  Production standard 5.3.559 Copyright                                    # 3.559
#    Copyright (c) 2020 Bradley Allen                                                # 3.555
#    MIT License is online in the repository as a file named LICENSE"         # 3.559
###  Production standard 1.3.614 DEBUG variable
#    Order of precedence: environment variable, default code
if [[ "${DEBUG}" == ""  ]] ; then DEBUG="0" ; fi   # 0 = debug off, 1 = debug on, 'export DEBUG=1', 'unset DEBUG' to unset environment variable (bash)
if [[ "${DEBUG}" == "2" ]] ; then set -x    ; fi   # Print trace of simple commands before they are executed
if [[ "${DEBUG}" == "3" ]] ; then set -v    ; fi   # Print shell input lines as they are read
if [[ "${DEBUG}" == "4" ]] ; then set -e    ; fi   # Exit immediately if non-zero exit status
if [[ "${DEBUG}" == "5" ]] ; then set -e -o pipefail ; fi   # Exit immediately if non-zero exit status and exit if any command in a pipeline errors
#
BOLD=$(tput -Txterm bold)
NORMAL=$(tput -Txterm sgr0)
RED=$(tput    setaf 1)
GREEN=$(tput  setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput   setaf 4)
PURPLE=$(tput setaf 5)
CYAN=$(tput   setaf 6)
WHITE=$(tput  setaf 7)

#    Date and time function ISO 8601
get_date_stamp() {
  DATE_STAMP=$(date +%Y-%m-%dT%H:%M:%S.%6N%:z)
  TEMP=$(date +%Z)
  DATE_STAMP="${DATE_STAMP} (${TEMP})"
}

#    Fully qualified domain name FQDN hostname
LOCALHOST=$(hostname -f)

#    Version
#    Assumptions for the next two lines of code:  The second line in this script includes the script path & name as the second item and
#    the script version as the third item separated with space(s).  The tool I use is called 'markit'. See example line below:
#       template/template.sh  3.517.783  2019-09-13T18:20:42.144356-05:00 (CDT)  https://github.com/BradleyA/user-files.git  uadmin  one-rpi3b.cptx86.com 3.516  
SCRIPT_NAME=$(head -2 "${0}" | awk '{printf $2}')  #  Different from ${COMMAND_NAME}=$(echo "${0}" | sed 's/^.*\///'), SCRIPT_NAME = includes Git repository directory and can be used any where in script (for dev, test teams)
SCRIPT_VERSION=$(head -2 "${0}" | awk '{printf $3}')
if [[ "${SCRIPT_NAME}" == "" ]] ; then SCRIPT_NAME="${0}" ; fi
if [[ "${SCRIPT_VERSION}" == "" ]] ; then SCRIPT_VERSION="v?.?" ; fi

#    GID
GROUP_ID=$(id -g)

###  Production standard 2.3.614 Log format (WHEN WHERE WHAT Version Line WHO UID:GID [TYPE] Message)
new_message() {  #  $1="${LINENO}"  $2="DEBUG INFO ERROR WARN"  $3="message"
  get_date_stamp
  echo -e "${NORMAL}${DATE_STAMP} ${LOCALHOST} ${BOLD}${CYAN}${SCRIPT_NAME}${NORMAL}[$$] ${BOLD}${BLUE}${SCRIPT_VERSION} ${PURPLE}${1}${NORMAL} ${USER} ${UID}:${GROUP_ID} ${BOLD}[${2}]${NORMAL}  ${3}"  # 2.3.614
}

#    INFO
DEBUG=1
if [[ "${DEBUG}" == "1" ]] ; then new_message "${LINENO}" "${YELLOW}INFO${WHITE}" "${BOLD}${CYAN}  Started...${NORMAL}" 1>&2 ; fi  # 1.3.614

###  Production standard 10.0 TESTing 

# >>>
echo "${BOLD}${YELLOW}${LINENO} post-commit >>>>>>>>>>>>>>>>>>>   ${NORMAL}"
pwd
set -x
ls -la /home/uadmin/github/BradleyA/git-TEST-commit-automation/hooks/EXAMPLES/TEST/SA-setup.sh
set +x
# >>>
REPOSITORY_ABSOLUTE_PATH=$(git rev-parse --show-toplevel)
export REPOSITORY_ABSOLUTE_PATH  #  export REPOSITORY_ABSOLUTE_PATH so test scripts can use it
if [[ "${DEBUG}" == "1" ]] ; then new_message "${LINENO}" "${YELLOW}DEBUG${WHITE}" "  REPOSITORY_ABSOLUTE_PATH  >${BOLD}${CYAN}${REPOSITORY_ABSOLUTE_PATH}${NORMAL}<" 1>&2 ; fi  # 1.3.614

if [[ ! -r "${REPOSITORY_ABSOLUTE_PATH}/hooks/COMMIT_FILE_LIST" ]] ; then echo "COMMIT_FILE_LIST is created by pre-commit (git hook) and is required input for this script." ; exit 1 ; fi
COMMIT_FILE_LIST=$(cat "${REPOSITORY_ABSOLUTE_PATH}"/hooks/COMMIT_FILE_LIST)

if [[ "${DEBUG}" == "1" ]] ; then new_message "${LINENO}" "${YELLOW}DEBUG${WHITE}" "  Files being committed by ${GIT_AUTHOR_NAME} (${USER}): >${BOLD}${CYAN}${COMMIT_FILE_LIST}${NORMAL}<" 1>&2 ; fi  # 1.3.614
echo    "${BOLD}${YELLOW}"
echo    "'####:'##::: ##:::::::'########:'########::'######::'########:"
echo    ". ##:: ###:: ##:::::::... ##..:: ##.....::'##... ##:... ##..::"
echo    ": ##:: ####: ##:::::::::: ##:::: ##::::::: ##:::..::::: ##::::"
echo    ": ##:: ## ## ##:::::::::: ##:::: ######:::. ######::::: ##::::"
echo    ": ##:: ##. ####:::::::::: ##:::: ##...:::::..... ##:::: ##::::"
echo    ": ##:: ##:. ###:::::::::: ##:::: ##:::::::'##::: ##:::: ##::::"
echo    "'####: ##::. ##:::::::::: ##:::: ########:. ######::::: ##::::"
echo    "....::..::::..:::::::::::..:::::........:::......::::::..:::::${NORMAL}"

#    Loop through committed files found in COMMIT_FILE_LIST
#    - Note: pre-commit (git hook) created ${REPOSITORY_ABSOLUTE_PATH}/hooks/COMMIT_FILE_LIST
for COMMIT_PATH_FILE_NAME in ${COMMIT_FILE_LIST} ; do
  COMMIT_FILE_NAME=$(echo "${COMMIT_PATH_FILE_NAME}" | rev | cut -d '/' -f 1 | rev)  # Did not use baseline becasue I did not want to eliminate directories with a dot trailing SUFFIX
  COMMIT_PATH="${COMMIT_PATH_FILE_NAME//${COMMIT_FILE_NAME}/}"
  if [[ "${DEBUG}" == "1" ]] ; then new_message "${LINENO}" "${YELLOW}DEBUG${WHITE}" "  \${COMMIT_PATH_FILE_NAME} >${BOLD}${CYAN}${COMMIT_PATH_FILE_NAME}${NORMAL}< \${COMMIT_FILE_NAME} >${BOLD}${CYAN}${COMMIT_FILE_NAME}${NORMAL}< \${COMMIT_PATH} >${BOLD}${CYAN}${COMMIT_PATH}${NORMAL}< \${COMMIT_PATH}TEST/\${COMMIT_FILE_NAME} >${BOLD}${CYAN}${COMMIT_PATH}TEST/${COMMIT_FILE_NAME}${NORMAL}<" 1>&2 ; fi  # 1.3.614
  #    Check if COMMIT_FILE has a 'TEST' directory
  if [[ -d "${REPOSITORY_ABSOLUTE_PATH}/${COMMIT_PATH}TEST/${COMMIT_FILE_NAME}" ]] ; then
    echo "[${BOLD}${YELLOW}INFO${NORMAL}]         Test case directory found ${COMMIT_PATH}TEST/${BOLD}${GREEN}${COMMIT_FILE_NAME}${NORMAL}, for ${GIT_AUTHOR_NAME} (${USER})." 1>&2
    cd "${REPOSITORY_ABSOLUTE_PATH}/${COMMIT_PATH}TEST/${COMMIT_FILE_NAME}"

# >>>
echo "${BOLD}${YELLOW}${LINENO} post-commit >>>>>>>>>>>>>>>>   any body out there ????????????????????????????${NORMAL}"
new_message "${LINENO}" "${YELLOW}DEBUG${WHITE}" "  \${COMMIT_PATH_FILE_NAME} >${COMMIT_PATH_FILE_NAME}< \${COMMIT_FILE_NAME} >${COMMIT_FILE_NAME}< \${COMMIT_PATH} >${COMMIT_PATH}< \${COMMIT_PATH}TEST/\${COMMIT_FILE_NAME} >${COMMIT_PATH}TEST/${COMMIT_FILE_NAME}<"   # 1.3.614
# >>>

    DIR_COUNT=0  # set default to NO sub-directory included
    if [[ "${COMMIT_PATH_FILE_NAME}" != $(basename "${COMMIT_PATH_FILE_NAME}") ]] ; then  #  Is there a sub-directory included
      cd "$(dirname "${COMMIT_PATH_FILE_NAME}")"
      DIR_COUNT=$(echo "${COMMIT_PATH_FILE_NAME}" | grep -o '/' | wc -l)  # count number of '/'
    fi
    if [[ "${DEBUG}" == "1" ]] ; then new_message "${LINENO}" "${YELLOW}DEBUG${WHITE}" "  ${BOLD}${YELLOW}DIR_COUNT  >${BOLD}${CYAN}${DIR_COUNT}${NORMAL}< COMMIT_PATH_FILE_NAME  >${BOLD}${CYAN}${COMMIT_PATH_FILE_NAME}${NORMAL}<  pwd  >${BOLD}${CYAN}$(pwd)<${NORMAL}" 1>&2 ; fi  # 1.3.614
    EXAMPLES_DIRECTORY="../../hooks/EXAMPLES"
    if [[ ${DIR_COUNT} != 0 ]] ; then
      while [[ ${DIR_COUNT} != 0 ]] ; do  DIR_COUNT=$((DIR_COUNT - 1)) ; EXAMPLES_DIRECTORY="../${EXAMPLES_DIRECTORY}" ; done
    fi
    if [[ "${DEBUG}" == "1" ]] ; then new_message "${LINENO}" "${YELLOW}DEBUG${WHITE}" "  EXAMPLES_DIRECTORY >${BOLD}${CYAN}${EXAMPLES_DIRECTORY}${NORMAL}<" 1>&2 ; fi
    export EXAMPLES_DIRECTORY  #  export EXAMPLES_DIRECTORY so test scripts can use it

# >>>	REPOSITORY_RELATIVE_PATH  need change REPOSITORY_RELATIVE_PATH everywhere to EXAMPLES_DIRECTORY
pwd
ls -la
# >>>

    ###  SA (Static Analysis)
    #    run SA-cleanup.sh if found
    if [[ -s "${REPOSITORY_ABSOLUTE_PATH}/${COMMIT_PATH}TEST/${COMMIT_FILE_NAME}/SA-cleanup.sh" ]] ; then
# >>>
echo "${BOLD}${YELLOW}${LINENO} post-commit >>>>>>>>>>>>>>>>>>>   RUN SA.cleanup${NORMAL}"
# >>>
# >>> remove because no argument is required      "${REPOSITORY_ABSOLUTE_PATH}/${COMMIT_PATH}TEST/${COMMIT_FILE_NAME}/SA-cleanup.sh" "${REPOSITORY_ABSOLUTE_PATH}"
    "${REPOSITORY_ABSOLUTE_PATH}/${COMMIT_PATH}TEST/${COMMIT_FILE_NAME}/SA-cleanup.sh"
# >>>
echo "${BOLD}${YELLOW}${LINENO} post-commit >>>>>>>>>>>>>>>>>>>   ${CYAN}finished SA.cleanup${NORMAL}"
ls -la
# >>>
    fi

    #    run SA-setup.sh if found
    if [[ -s "${REPOSITORY_ABSOLUTE_PATH}/${COMMIT_PATH}TEST/${COMMIT_FILE_NAME}/SA-setup.sh" ]] ; then
# >>>
echo "${BOLD}${YELLOW}${LINENO} post-commit >>>>>>>>>>>>>>>>>>>   RUN SA.setup${NORMAL}"
pwd
ls -la
set -x
# >>>
      "${REPOSITORY_ABSOLUTE_PATH}/${COMMIT_PATH}TEST/${COMMIT_FILE_NAME}/SA-setup.sh" "${REPOSITORY_ABSOLUTE_PATH}" "${REPOSITORY_RELATIVE_PATH}"
# >>>
echo "${BOLD}${YELLOW}${LINENO} post-commit >>>>>>>>>>>>>>>>>>>   ${CYAN}finished SA.setup${NORMAL}"
ls -la
set +x
# >>>
ls -la
    fi

    #    Create list of test cases
    SA_TEST_CASES=$(ls -1 | grep "^SA" | grep -v "\.")
    if [[ "${DEBUG}" == "1" ]] ; then new_message "${LINENO}" "${YELLOW}DEBUG${WHITE}" " \${SA_TEST_CASES} >${BOLD}${CYAN}${SA_TEST_CASES}${NORMAL}<" 1>&2 ; fi  # 1.3.614
    NO_TEST_CASES=$(ls -1 | grep "^SA" | grep -v "\." -c)
    NO_TEST_CASES_PASS=0
    NO_TEST_CASES_FAIL=0
    NO_TEST_CASES_ERROR=0
    TEST_CASES_ERROR_EXIT_CODE=""
    RUN_SA_CLEANUP=0  #  run SA-cleanup.sh again (0=no, 1=yes)  #36
    #    Loop through test cases
    for SA_TEST_CASE in ${SA_TEST_CASES} ; do
      #    Run SA_TEST_CASE(s)
      if [[ "${DEBUG}" == "1" ]] ; then new_message "${LINENO}" "${YELLOW}DEBUG${WHITE}" "  \${REPOSITORY_ABSOLUTE_PATH}/\${COMMIT_PATH}TEST/\${COMMIT_FILE_NAME}/\${SA_TEST_CASE} >${BOLD}${CYAN}${REPOSITORY_ABSOLUTE_PATH}/${COMMIT_PATH}TEST/${COMMIT_FILE_NAME}/${SA_TEST_CASE}${NORMAL}< \${REPOSITORY_ABSOLUTE_PATH}/${COMMIT_PATH_FILE_NAME} >${BOLD}${CYAN}${REPOSITORY_ABSOLUTE_PATH}/${COMMIT_PATH_FILE_NAME}${NORMAL}<" 1>&2 ; fi  # 1.3.614
# >>>
pwd
ls -la
# >>>
      TEST_CASE="${REPOSITORY_ABSOLUTE_PATH}/${COMMIT_PATH}TEST/${COMMIT_FILE_NAME}/${SA_TEST_CASE} ${REPOSITORY_ABSOLUTE_PATH}/${COMMIT_PATH_FILE_NAME}"
      eval "${TEST_CASE}"
      EXIT_CODE=${?}
      if [[ "${DEBUG}" == "1" ]] ; then new_message "${LINENO}" "${YELLOW}DEBUG${WHITE}" "  \${EXIT_CODE} >${BOLD}${CYAN}${EXIT_CODE}${NORMAL}<" 1>&2 ; fi  # 1.3.614
      if [[ ${EXIT_CODE} -eq 0 ]] ; then
        NO_TEST_CASES_PASS=$((NO_TEST_CASES_PASS+1))
      elif [[ ${EXIT_CODE} -eq 1 ]] ; then
        NO_TEST_CASES_FAIL=$((NO_TEST_CASES_FAIL+1))
      else
        NO_TEST_CASES_ERROR=$((NO_TEST_CASES_ERROR+1))
        TEST_CASES_ERROR_EXIT_CODE="${TEST_CASES_ERROR_EXIT_CODE}${EXIT_CODE} "
      fi
    done
    #    run SA-cleanup.sh if found
    if [[ -s "${REPOSITORY_ABSOLUTE_PATH}/${COMMIT_PATH}TEST/${COMMIT_FILE_NAME}/SA-cleanup.sh" ]] && [[ ${NO_TEST_CASES_FAIL} == 0 ]] && [[ ${NO_TEST_CASES_ERROR} == 0 ]] ; then
      "${REPOSITORY_ABSOLUTE_PATH}/${COMMIT_PATH}TEST/${COMMIT_FILE_NAME}/SA-cleanup.sh" "${REPOSITORY_ABSOLUTE_PATH}"
      RUN_SA_CLEANUP=1  #  run SA-cleanup.sh again (0=no, 1=yes)  #36
    fi
    echo -e "\n     SA: ${BOLD}${YELLOW}${COMMIT_FILE_NAME}${NORMAL}\n   Number of test cases = ${BOLD}${NO_TEST_CASES}${NORMAL}\n   Number of test cases pass = ${BOLD}${GREEN}${NO_TEST_CASES_PASS}${NORMAL}\n   Number of test cases fail = ${BOLD}${RED}${NO_TEST_CASES_FAIL}${NORMAL}\n   Number of test cases error = ${BOLD}${CYAN}${NO_TEST_CASES_ERROR}${NORMAL}"
    echo  "${TEST_CASES_ERROR_EXIT_CODE}" | tr ' ' '\n' | grep '[^[:blank:]]' | sort | uniq -c | sort -k 2 -n  #  List error exit codes and how many of each exit code

    ###  FVT (Function Verification Test)
    #    run FVT-cleanup.sh if found
    if [[ -s "${REPOSITORY_ABSOLUTE_PATH}/${COMMIT_PATH}TEST/${COMMIT_FILE_NAME}/FVT-cleanup.sh" ]] ; then
      "${REPOSITORY_ABSOLUTE_PATH}/${COMMIT_PATH}TEST/${COMMIT_FILE_NAME}/FVT-cleanup.sh" "${REPOSITORY_ABSOLUTE_PATH}"
    fi
    #    run FVT-setup.sh if found
    if [[ -s "${REPOSITORY_ABSOLUTE_PATH}/${COMMIT_PATH}TEST/${COMMIT_FILE_NAME}/FVT-setup.sh" ]] ; then
      "${REPOSITORY_ABSOLUTE_PATH}/${COMMIT_PATH}TEST/${COMMIT_FILE_NAME}/FVT-setup.sh" "${REPOSITORY_ABSOLUTE_PATH}"
    fi
    #    Create list of FVT test cases
    FVT_TEST_CASES=$(ls -1 | grep "^FVT" | grep -v "\.")
    if [[ "${DEBUG}" == "1" ]] ; then new_message "${LINENO}" "${YELLOW}DEBUG${WHITE}" "  \${FVT_TEST_CASES} >${BOLD}${CYAN}${FVT_TEST_CASES}${NORMAL}<" 1>&2 ; fi  # 1.3.614
    NO_TEST_CASES=$(ls -1 | grep "^FVT" | grep -v "\." -c)
    NO_TEST_CASES_PASS=0
    NO_TEST_CASES_FAIL=0
    NO_TEST_CASES_ERROR=0
    TEST_CASES_ERROR_EXIT_CODE=""
    #    Loop through FVT_TEST_CASES
    for FVT_TEST_CASE in ${FVT_TEST_CASES} ; do
      #    Run FVT_TEST_CASE(s)
      if [[ "${DEBUG}" == "1" ]] ; then new_message "${LINENO}" "${YELLOW}DEBUG${WHITE}" "  \${REPOSITORY_ABSOLUTE_PATH}/${COMMIT_PATH_FILE_NAME} >${BOLD}${CYAN}${REPOSITORY_ABSOLUTE_PATH}/${COMMIT_PATH_FILE_NAME}${NORMAL}<" 1>&2 ; fi  # 1.3.614
      TEST_CASE="${REPOSITORY_ABSOLUTE_PATH}/${COMMIT_PATH}TEST/${COMMIT_FILE_NAME}/${FVT_TEST_CASE} ${REPOSITORY_ABSOLUTE_PATH}/${COMMIT_PATH_FILE_NAME}"
      eval "${TEST_CASE}"
      EXIT_CODE=${?}
      if [[ "${DEBUG}" == "1" ]] ; then new_message "${LINENO}" "${YELLOW}DEBUG${WHITE}" "  \${EXIT_CODE} >${BOLD}${CYAN}${EXIT_CODE}${NORMAL}<" 1>&2 ; fi  # 1.3.614
      if [[ ${EXIT_CODE} -eq 0 ]] ; then
        NO_TEST_CASES_PASS=$((NO_TEST_CASES_PASS+1))
      elif  [[ ${EXIT_CODE} -eq 1 ]] ; then
        NO_TEST_CASES_FAIL=$((NO_TEST_CASES_FAIL+1))
      else
        NO_TEST_CASES_ERROR=$((NO_TEST_CASES_ERROR+1))
        TEST_CASES_ERROR_EXIT_CODE="${TEST_CASES_ERROR_EXIT_CODE}${EXIT_CODE} "
      fi
    done
    #    run FVT-cleanup.sh if found
    if [[ -s "${REPOSITORY_ABSOLUTE_PATH}/${COMMIT_PATH}TEST/${COMMIT_FILE_NAME}/FVT-cleanup.sh" ]] && [[ ${NO_TEST_CASES_FAIL} == 0 ]] && [[ ${NO_TEST_CASES_ERROR} == 0 ]] ; then
      "${REPOSITORY_ABSOLUTE_PATH}/${COMMIT_PATH}TEST/${COMMIT_FILE_NAME}/FVT-cleanup.sh" "${REPOSITORY_ABSOLUTE_PATH}"
    fi
    echo -e "\n     FVT: ${BOLD}${YELLOW}${COMMIT_FILE_NAME}${NORMAL}\n   Number of test cases = ${BOLD}${NO_TEST_CASES}${NORMAL}\n   Number of test cases pass = ${BOLD}${GREEN}${NO_TEST_CASES_PASS}${NORMAL}\n   Number of test cases fail = ${BOLD}${RED}${NO_TEST_CASES_FAIL}${NORMAL}\n   Number of test cases error = ${BOLD}${CYAN}${NO_TEST_CASES_ERROR}${NORMAL}"
    echo  "${TEST_CASES_ERROR_EXIT_CODE}" | tr ' ' '\n' | grep '[^[:blank:]]' | sort | uniq -c | sort -k 2 -n  #  List error exit codes and how many of each exit code
    if [[ -s "${REPOSITORY_ABSOLUTE_PATH}/${COMMIT_PATH}TEST/${COMMIT_FILE_NAME}/SA-cleanup.sh" ]] && [[ ${RUN_SA_CLEANUP} == 1 ]] ; then #  run SA-cleanup.sh again (0=no, 1=yes)  #36
      "${REPOSITORY_ABSOLUTE_PATH}/${COMMIT_PATH}TEST/${COMMIT_FILE_NAME}/SA-cleanup.sh" "${REPOSITORY_ABSOLUTE_PATH}"
    fi
  else
    echo "[${BOLD}${YELLOW}INFO${NORMAL}]         ${BOLD}${RED}No${NORMAL} test case directory found ${COMMIT_PATH}TEST/${BOLD}${CYAN}${COMMIT_FILE_NAME}${NORMAL}, for ${GIT_AUTHOR_NAME}."
  fi
done
if [[ "${DEBUG}" == "0" ]] ; then  rm "${REPOSITORY_ABSOLUTE_PATH}"/hooks/COMMIT_FILE_LIST ; fi #  Remove COMMIT_FILE_LIST if NOT in DEBUG

#    Process times
echo -e "${BOLD}${YELLOW}\n     CPU Time    \n  user     sys${CYAN}"
times
echo -e "${NORMAL}\n"

###  Add code here to run additional post-commit hooks

#
if [[ "${DEBUG}" == "1" ]] ; then new_message "${LINENO}" "${YELLOW}INFO${WHITE}" "${BOLD}${CYAN}  Operation finished...${NORMAL}" 1>&2 ; fi  # 1.3.614
DEBUG=0
###
