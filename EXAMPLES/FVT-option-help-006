#!/bin/bash
#	hooks/EXAMPLES/FVT-option-help-006  3.488.743  2019-08-31T23:12:59.830763-05:00 (CDT)  https://github.com/BradleyA/user-files.git  uadmin  one-rpi3b.cptx86.com 3.487  
#	   SCRIPT_VERSION incident corrected and correct Test script logic ERROR message 
#	hooks/EXAMPLES/FVT-option-help-006  3.488.743  2019-08-31T23:10:55.312609-05:00 (CDT)  https://github.com/BradleyA/user-files.git  uadmin  one-rpi3b.cptx86.com 3.487  
#	   SCRIPT_VERSION incident corrected and correct Test script logic ERROR message 
#	hooks/EXAMPLES/FVT-option-help-006  3.481.736  2019-08-31T16:14:14.925103-05:00 (CDT)  https://github.com/BradleyA/user-files.git  uadmin  one-rpi3b.cptx86.com 3.480  
#	   hooks/EXAMPLES/FVT-option-help-001 002 003 004 005 006   change tab to two spaces update Production standard 1.3.475 DEBUG variable 
###  hooks/EXAMPLES/FVT-option-help-006 - test case
###  Production standard 3.0 shellcheck
###  Production standard 5.1.160 Copyright
#    Copyright (c) 2019 Bradley Allen
#    MIT License is in the online DOCUMENTATION, DOCUMENTATION URL defined below.
###  Production standard 1.3.475 DEBUG variable
#    Order of precedence: environment variable, default code
if [[ "${DEBUG}" == ""  ]] ; then DEBUG="0" ; fi   # 0 = debug off, 1 = debug on, 'export DEBUG=1', 'unset DEBUG' to unset environment variable (bash)
if [[ "${DEBUG}" == "2" ]] ; then set -x    ; fi   # Print trace of simple commands before they are executed
if [[ "${DEBUG}" == "3" ]] ; then set -v    ; fi   # Print shell input lines as they are read
#
BOLD=$(tput -Txterm bold)
NORMAL=$(tput -Txterm sgr0)

#    Date and time function ISO 8601
get_date_stamp() {
  DATE_STAMP=$(date +%Y-%m-%dT%H:%M:%S.%6N%:z)
  TEMP=$(date +%Z)
  DATE_STAMP="${DATE_STAMP} (${TEMP})"
}

#    Fully qualified domain name FQDN hostname
LOCALHOST=$(hostname -f)

#    Version
SCRIPT_VERSION=$(head -2 "${0}" | awk '{printf $3}')

if [[ "${DEBUG}" == "1" ]] ; then get_date_stamp ; echo -e "${NORMAL}${DATE_STAMP} ${LOCALHOST} ${0}[$$] ${SCRIPT_VERSION} ${LINENO} ${USER} ${USER_ID}:${GROUP_ID} ${BOLD}[DEBUG]${NORMAL}  Operation started." 1>&2 ; fi

###  Place test case here

"${1}" -? > "${0}".test-case-output

#    The option is functioning correctly:  if USAGE && DESCRIPTION && DOCUMENTATION appear in "${0}".test-case-output 
if grep -q 'USAGE' "${0}".test-case-output ; then
  if grep -q 'DESCRIPTION' "${0}".test-case-output  ; then
    if grep -q 'DOCUMENTATION' "${0}".test-case-output  ; then
      echo "${BOLD}Test case --->${NORMAL} ${0} ${1} 0 - USAGE DESCRIPTION DOCUMENTATION found in output ${BOLD}PASS - PASS${NORMAL}"
      exit 0
    else
      echo "${BOLD}Test case --->${NORMAL} ${0} ${1} 1 - DOCUMENTATION not found in output - ${BOLD}FAIL - FAIL${NORMAL}"
      exit 1
    fi
  else
    echo "${BOLD}Test case --->${NORMAL} ${0} ${1} 1 - DESCRIPTION not found in output - ${BOLD}FAIL - FAIL${NORMAL}"
    exit 1
  fi
else
  echo "${BOLD}Test case --->${NORMAL} ${0} ${1} 1 - USAGE not found in output - ${BOLD}FAIL - FAIL${NORMAL}"
  exit 1
fi

echo "${BOLD}Test case --->${NORMAL} ${0} ${1} 124 - Test script logic ERROR - ${BOLD}ERROR - ERROR${NORMAL}"
exit 124
###
