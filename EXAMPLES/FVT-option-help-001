#!/bin/bash
#	hooks/EXAMPLES/FVT-option-help-001  3.480.735  2019-08-31T15:43:37.492546-05:00 (CDT)  https://github.com/BradleyA/user-files.git  uadmin  one-rpi3b.cptx86.com 3.479-1-g9975d58  
#	   hooks/EXAMPLES/FVT-option-version-001 002 003  remove tabs use two spaces add additional tests in test cases 
#	hooks/EXAMPLES/FVT-option-help-001  3.473.727  2019-08-30T22:09:02.627062-05:00 (CDT)  https://github.com/BradleyA/user-files.git  uadmin  one-rpi3b.cptx86.com 3.472  
#	   template/template.sh remove a tabs for two spaces 
###  hooks/EXAMPLES/FVT-option-help-001 - test case
###  Production standard 3.0 shellcheck
###  Production standard 5.1.160 Copyright
#    Copyright (c) 2019 Bradley Allen
#    MIT License is in the online DOCUMENTATION, DOCUMENTATION URL defined below.
###  Production standard 1.3.475 DEBUG variable
#    Order of precedence: environment variable, default code
if [[ "${DEBUG}" == ""  ]] ; then DEBUG="0" ; fi   # 0 = debug off, 1 = debug on, 'export DEBUG=1', 'unset DEBUG' to unset environment variable (bash)
if [[ "${DEBUG}" == "2" ]] ; then set -x    ; fi   # Print trace of simple commands before they are executed
if [[ "${DEBUG}" == "3" ]] ; then set -v    ; fi   # Print shell input lines as they are read
#
BOLD=$(tput -Txterm bold)
NORMAL=$(tput -Txterm sgr0)

#    Date and time function ISO 8601
get_date_stamp() {
  DATE_STAMP=$(date +%Y-%m-%dT%H:%M:%S.%6N%:z)
  TEMP=$(date +%Z)
  DATE_STAMP="${DATE_STAMP} (${TEMP})"
}

#    Fully qualified domain name FQDN hostname
LOCALHOST=$(hostname -f)

#    Version
SCRIPT_VERSION=$(head -2 "${1}" | awk '{printf $3}')

if [ "${DEBUG}" == "1" ] ; then get_date_stamp ; echo -e "${NORMAL}${DATE_STAMP} ${LOCALHOST} ${0}[$$] ${SCRIPT_VERSION} ${LINENO} ${USER} ${USER_ID}:${GROUP_ID} ${BOLD}[DEBUG]${NORMAL}  Operation started." 1>&2 ; fi

###     Place test case here

"${1}" --help > "${0}".test-case-output

#	The option is functioning correctly:  if USAGE && DESCRIPTION && DOCUMENTATION appear in "${0}".test-case-output 
if grep -q 'USAGE' "${0}".test-case-output ; then
        if grep -q 'DESCRIPTION' "${0}".test-case-output  ; then
                if grep -q 'DOCUMENTATION' "${0}".test-case-output  ; then
			echo "${BOLD}Test case --->${NORMAL} ${0} ${1} 0 - USAGE DESCRIPTION DOCUMENTATION found in output ${BOLD}PASS - PASS${NORMAL}"
			exit 0
		else
			echo "${BOLD}Test case --->${NORMAL} ${0} ${1} 1 - DOCUMENTATION not found in output - ${BOLD}FAIL - FAIL${NORMAL}"
			exit 1
                fi
	else
		echo "${BOLD}Test case --->${NORMAL} ${0} ${1} 1 - DESCRIPTION not found in output - ${BOLD}FAIL - FAIL${NORMAL}"
		exit 1
        fi
else
	echo "${BOLD}Test case --->${NORMAL} ${0} ${1} 1 - USAGE not found in output - ${BOLD}FAIL - FAIL${NORMAL}"
	exit 1
fi
exit 124
###
